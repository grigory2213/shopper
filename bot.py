import sys
import locale

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É —Å–∏—Å—Ç–µ–º—ã
default_encoding = locale.getpreferredencoding() 

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
sys.stdin.reconfigure(encoding='utf-8')
sys.stdout.reconfigure(encoding='utf-8')
sys.stderr


import os
import sqlite3
import datetime
import telebot
from telebot import types
import json
from fpdf import FPDF

from whisper_transcription import transcribe_audio
from ya_gpt import ya_request_1, ya_request_2

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = ''
DB_NAME = 'bot.db'
AUDIO_DIR = 'temp_audio'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ø–∞–ø–∫–∏ –¥–ª—è –∞—É–¥–∏–æ
bot = telebot.TeleBot(BOT_TOKEN)
os.makedirs(AUDIO_DIR, exist_ok=True)

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}  # {user_id: list_of_question_ids}

def get_questions_by_survey_id(survey_id: int) -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ ID –∞–Ω–∫–µ—Ç—ã.
    
    :param survey_id: ID –∞–Ω–∫–µ—Ç—ã
    :return: –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ (—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–æ–≤)
    """
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
    cursor.execute('''
        SELECT question_id, question_text FROM questions WHERE survey_id = ?
    ''', (survey_id,))

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    questions = str({row[0]: row[1] for row in cursor.fetchall()})
    conn.close()
    return questions

def get_question_by_id(question_id: int) -> str:
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT question_text FROM questions WHERE question_id = ?', (question_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

def register_user(user_id, username):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    try:
        c.execute("INSERT INTO users (username, user_id, created_at) VALUES (?, ?, ?)",
                  (username, user_id, datetime.datetime.now()))
        conn.commit()
    except sqlite3.IntegrityError:
        pass
    finally:
        conn.close()

def add_answer(inspection_id: int, question_id: int, answer_text: str):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
    cursor.execute('''
        UPDATE answers SET answer_text = ? 
        WHERE inspection_id = ? AND question_id = ?
    ''', (answer_text, inspection_id, question_id))
    
    if cursor.rowcount == 0:
        cursor.execute('''
            INSERT INTO answers (inspection_id, question_id, answer_text)
            VALUES (?, ?, ?)
        ''', (inspection_id, question_id, answer_text))
    
    conn.commit()
    conn.close()

def get_null_questions(inspection_id: int) -> list:
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT question_id FROM answers 
        WHERE inspection_id = ? AND answer_text = "null"
    ''', (inspection_id,))
    null_questions = [row[0] for row in cursor.fetchall()]
    conn.close()
    return null_questions

def send_null_questions_to_bot(user_id, questions):
    if not questions:
        bot.send_message(user_id, "üéâ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã! –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...")
        send_report_to_user(user_id, inspection_id=2)
        return

    user_states[user_id] = questions  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    bot.send_message(user_id, "‚ùì –í–æ–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –æ—Ç–≤–µ—Ç–æ–≤:")
    for i, q_id in enumerate(questions, 1):
        question_text = get_question_by_id(q_id)
        if question_text:
            bot.send_message(user_id, f"{i}. {question_text}\n/answer {i} [–≤–∞—à –æ—Ç–≤–µ—Ç]")
            
class PDF(FPDF):
    def __init__(self):
        super().__init__()
        self.add_font('DejaVu', '', 'DejaVuSans.ttf', uni=True)
        self.set_font('DejaVu', '', 12)
def generate_inspection_report(inspection_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –æ—Ç—á–µ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8"""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT q.question_text, a.answer_text 
        FROM answers a
        JOIN questions q ON a.question_id = q.question_id
        WHERE a.inspection_id = ?
        ORDER BY q.question_id
    ''', (inspection_id,))
    
    report_data = cursor.fetchall()
    conn.close()
    
    if not report_data:
        return None
    
    pdf = PDF()
    pdf.add_page()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    pdf.set_font('DejaVu', '', 16)
    pdf.cell(200, 10, txt="–û–¢–ß–ï–¢ –û –ü–†–û–í–ï–†–ö–ï", ln=True, align='C')
    pdf.ln(15)
    
    # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
    pdf.set_font('DejaVu', '', 12)
    for idx, (question, answer) in enumerate(report_data, 1):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        def safe_text(text):
            return text if isinstance(text, str) else str(text, 'utf-8')
        
        question = safe_text(question)
        answer = safe_text(answer)
        
        pdf.multi_cell(0, 8, f"–í–æ–ø—Ä–æ—Å #{idx}:\n{question}", 0, 'L')
        pdf.multi_cell(0, 8, f"–û—Ç–≤–µ—Ç:\n{answer}", 0, 'L')
        pdf.ln(10)
    
    filename = f"report_{inspection_id}.pdf"
    filepath = os.path.join(AUDIO_DIR, filename)
    pdf.output(filepath)
    
    return filepath

def send_report_to_user(user_id: int, inspection_id: int):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        report_path = generate_inspection_report(inspection_id)
        if not report_path:
            bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")
            return
            
        with open(report_path, 'rb') as report_file:
            bot.send_document(
                chat_id=user_id,
                document=report_file,
                caption=f"üìÑ –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ #{inspection_id}",
                timeout=30
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(report_path)
        
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")


@bot.message_handler(commands=['start'])
def handle_start(message):
    register_user(message.from_user.id, message.from_user.username)
    bot.reply_to(message, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ /process_audio")

@bot.message_handler(commands=['process_audio'])
def handle_process_audio(message):
    msg = bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3")
    bot.register_next_step_handler(msg, process_audio_step)

@bot.message_handler(commands=['answer'])
def handle_answer(message):
    try:
        user_id = message.from_user.id
        args = message.text.split()
        
        if len(args) < 3:
            bot.send_message(user_id, "‚ùå –§–æ—Ä–º–∞—Ç: /answer [–Ω–æ–º–µ—Ä] [–æ—Ç–≤–µ—Ç]")
            return
            
        _, num_str, *answer_parts = args
        answer_text = ' '.join(answer_parts)
        
        if not num_str.isdigit():
            bot.send_message(user_id, "‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
            
        question_num = int(num_str)
        questions = user_states.get(user_id, [])
        
        if not (1 <= question_num <= len(questions)):
            bot.send_message(user_id, f"‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {len(questions)}")
            return
            
        question_id = questions[question_num-1]
        add_answer(2, question_id, answer_text)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        remaining_questions = get_null_questions(2)
        if remaining_questions:
            send_null_questions_to_bot(user_id, remaining_questions)
        else:
            bot.send_message(user_id, "‚úÖ –í—Å–µ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...")
            send_report_to_user(user_id, inspection_id=2)
            del user_states[user_id]
            
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def process_audio_step(message):
    try:
        user_id = message.from_user.id
        
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ
        if message.document and message.document.mime_type == 'audio/mpeg':
            file_id = message.document.file_id
        elif message.audio and message.audio.mime_type == 'audio/mpeg':
            file_id = message.audio.file_id
        else:
            bot.send_message(user_id, "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è MP3 —Ñ–∞–π–ª!")
            return
            
        file_info = bot.get_file(file_id)
        audio_path = os.path.join(AUDIO_DIR, f"{user_id}_{datetime.datetime.now().timestamp()}.mp3")
        
        with open(audio_path, 'wb') as f:
            f.write(bot.download_file(file_info.file_path))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
        bot.send_message(user_id, "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ...")
        text = transcribe_audio(audio_path)
        
        # GPT –æ–±—Ä–∞–±–æ—Ç–∫–∞
        bot.send_message(user_id, "üîÑ –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è...")
        result1 = ya_request_1(text)
        with open('files/transcript1.txt', 'w', encoding='utf-8') as f:
            f.write(result1)
        bot.send_message(user_id, "üîÑ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤...")
        survey_questions = get_questions_by_survey_id(3)
        result2 = ya_request_2(result1, survey_questions)
        with open('files/transcript2.txt', 'w', encoding='utf-8') as f:
            f.write(result2)
        # –ü–∞—Ä—Å–∏–Ω–≥ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
        try:
            result2 = str(result2)
            result2 = result2.replace("```", "")
            answers = json.loads(result2)
            for q_id, answer in answers.items():
                add_answer(2, int(q_id), str(answer))
        except Exception as e:
            bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–æ–≤: {str(e)}")
            return
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        null_questions = get_null_questions(2)
        send_null_questions_to_bot(user_id, null_questions)
        
        os.remove(audio_path)
        
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        if 'audio_path' in locals() and os.path.exists(audio_path):
            os.remove(audio_path)

if __name__ == '__main__':
    bot.polling(none_stop=True)