import streamlit as st
import whisper
import spacy
import os
import tempfile
from spacy import displacy
from sqlalchemy import create_engine, Column, Integer, String, Boolean
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from passlib.hash import bcrypt

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'user' not in st.session_state:
    st.session_state.user = None
if 'audio_data' not in st.session_state:
    st.session_state.audio_data = None
if 'transcription' not in st.session_state:
    st.session_state.transcription = None

# ---- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ë–î ----
Base = declarative_base()
engine = create_engine('sqlite:///users.db')
Session = sessionmaker(bind=engine)

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    username = Column(String(50), unique=True)
    hashed_password = Column(String(100))
    is_admin = Column(Boolean, default=False)

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
Base.metadata.create_all(engine)

# ---- –§—É–Ω–∫—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ----
def create_user(username, password, is_admin=False):
    with Session() as session:
        if session.query(User).filter_by(username=username).first():
            return False
        hashed = bcrypt.hash(password)
        user = User(username=username, hashed_password=hashed, is_admin=is_admin)
        session.add(user)
        session.commit()
        return True

def verify_user(username, password):
    with Session() as session:
        user = session.query(User).filter_by(username=username).first()
        if user and bcrypt.verify(password, user.hashed_password):
            return user
        return None

# ---- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–µ–π –∞–Ω–∞–ª–∏–∑–∞ ----
@st.cache_resource
def load_models():
    whisper_model = whisper.load_model("medium")
    try:
        nlp = spacy.load("ru_core_news_sm")
    except OSError:
        raise Exception("–ú–æ–¥–µ–ª—å ru_core_news_sm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: python -m spacy download ru_core_news_sm")
    return whisper_model, nlp

# ---- –§—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ ----
def analyze_text(text, nlp):
    doc = nlp(text)
    return {
        "promo_mentioned": any(token.text.lower() in ["–∞–∫—Ü–∏—è", "—Å–∫–∏–¥–∫–∞", "–ø—Ä–æ–º–æ"] for token in doc),
        "was_polite": any(token.text.lower() in ["—Å–ø–∞—Å–∏–±–æ", "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞"] for token in doc),
        "entities": [(ent.text, ent.label_) for ent in doc.ents]
    }

# ---- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ----
def main_app():
    st.title("üïµÔ∏è –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ç–∞–π–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è")

    # ---- –ü–∞–Ω–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ----
    if not st.session_state.user:
        auth_type = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", ["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
        username = st.text_input("–õ–æ–≥–∏–Ω")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")

        if auth_type == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
            if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
                if create_user(username, password):
                    st.success("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ")
                else:
                    st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        if auth_type == "–í—Ö–æ–¥":
            if st.button("–í–æ–π—Ç–∏"):
                user = verify_user(username, password)
                if user:
                    st.session_state.user = {
                        "username": user.username,
                        "is_admin": user.is_admin
                    }
                    st.rerun()
                else:
                    st.error("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

    # ---- –í—ã—Ö–æ–¥ ----
    if st.sidebar.button("–í—ã–π—Ç–∏"):
        st.session_state.clear()  # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        st.rerun()

    # ---- –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ----
    if st.session_state.user:
        st.sidebar.subheader(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {st.session_state.user['username']}")

        if st.session_state.user.get('is_admin'):
            admin_interface()
        else:
            user_interface()

# ---- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ----
def admin_interface():
    st.subheader("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    with st.expander("–°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"):
        new_user = st.text_input("–õ–æ–≥–∏–Ω")
        new_pass = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        if st.button("–°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∞"):
            if create_user(new_user, new_pass, is_admin=True):
                st.success("–ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω")
            else:
                st.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è")

    audio_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª", type=["mp3", "wav"])

    if audio_file:
        process_audio(audio_file)

        if st.session_state.transcription:
            st.subheader("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:")
            edited_text = st.text_area("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                                       st.session_state.transcription,
                                       height=200,
                                       key="edited_text")

            if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"):
                analysis = analyze_text(edited_text, load_models()[1])

                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
                st.write(f"–£–ø–æ–º—è–Ω—É—Ç—ã –∞–∫—Ü–∏–∏: {'‚úÖ' if analysis['promo_mentioned'] else '‚ùå'}")
                st.write(f"–í–µ–∂–ª–∏–≤—ã–π —Ç–æ–Ω: {'‚úÖ' if analysis['was_polite'] else '‚ùå'}")

                if analysis['entities']:
                    st.write("–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏:")
                    for entity, label in analysis['entities']:
                        st.write(f"- {entity} ({label})")

# ---- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ----
def user_interface():
    st.subheader("–†–∞–±–æ—á–∞—è –ø–∞–Ω–µ–ª—å")
    audio_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª", type=["mp3", "wav"])

    if audio_file:
        process_audio(audio_file)

        if st.session_state.transcription:
            st.subheader("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:")
            edited_text = st.text_area("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                                       st.session_state.transcription,
                                       height=200,
                                       key="edited_text")

            if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"):
                analysis = analyze_text(edited_text, load_models()[1])

                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
                st.write(f"–£–ø–æ–º—è–Ω—É—Ç—ã –∞–∫—Ü–∏–∏: {'‚úÖ' if analysis['promo_mentioned'] else '‚ùå'}")
                st.write(f"–í–µ–∂–ª–∏–≤—ã–π —Ç–æ–Ω: {'‚úÖ' if analysis['was_polite'] else '‚ùå'}")

                if analysis['entities']:
                    st.write("–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏:")
                    for entity, label in analysis['entities']:
                        st.write(f"- {entity} ({label})")

# ---- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ ----
def process_audio(audio_file):
    # –ï—Å–ª–∏ –∞—É–¥–∏–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –Ω–µ –¥–µ–ª–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–Ω–æ–≤–∞
    if st.session_state.audio_data == audio_file.getvalue():
        return

    st.session_state.audio_data = audio_file.getvalue()

    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp:
        tmp.write(audio_file.read())
        audio_path = tmp.name

    whisper_model, nlp = load_models()

    with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ..."):
        st.session_state.transcription = whisper_model.transcribe(audio_path)["text"]

    os.unlink(audio_path)

if __name__ == "__main__":
    main_app()
